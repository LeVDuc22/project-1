/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package home.view;

import KTPM.exception.InvalidDobException;
import KTPMfinal.model.ChiTietPhieuTiem;
import KTPMfinal.model.LoVaccine;
import KTPMfinal.model.PhieuTiem;
import KTPMfinal.model.Vaccine;
import com.sun.java.accessibility.util.AWTEventMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class CapNhatPTDialog extends javax.swing.JDialog implements ActionListener {

    private LoVaccine loVaccine;
    private HomeFrm homeFrm;
    private XemVaCapNhatPTDialog xemVaCapNhatPTDialog;
    private ChiTietPhieuTiem chiTietPhieuTiem;
    private List<LoVaccine> loVaccines;
    private PhieuTiem phieuTiem;
    private int khoa;

    /**
     * Creates new form AddVaccineDialog
     */
    public CapNhatPTDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        addActionListener();
        homeFrm = (HomeFrm) parent;

    }

    public CapNhatPTDialog(java.awt.Frame parent, boolean modal, List<LoVaccine> loVaccines,
            PhieuTiem phieuTiem, int khoa) {
        this(parent, modal);
        this.loVaccines = loVaccines;
        this.phieuTiem = phieuTiem;
        this.khoa = khoa;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMaLoVaccine = new javax.swing.JTextField();
        btnAddVC = new javax.swing.JButton();
        btnClearVC = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        ComboBoxNVTiem = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtNgayTiem = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTenVaccine = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CẬP NHẬT PHIẾU TIÊM");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Cập nhật phiếu tiêm");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Mã lô Vaccine");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Ngày tiêm");

        btnAddVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddVC.setText("Thêm mới");

        btnClearVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnClearVC.setText("Xóa dữ liệu");

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setText("Hủy bỏ");

        ComboBoxNVTiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ComboBoxNVTiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lê Văn Đức", "Đồ Mạnh Đức", "Nguyễn Dương Bách", "Trần Văn Đoàn" }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Nhân viên tiêm");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Vaccine");

        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiem.setText("Tìm kiếm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel8))
                            .addComponent(jLabel7))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNgayTiem, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboBoxNVTiem, javax.swing.GroupLayout.Alignment.LEADING, 0, 358, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtMaLoVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtTenVaccine)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnAddVC, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClearVC, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMaLoVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiem))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNgayTiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxNVTiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVC)
                    .addComponent(btnClearVC)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapNhatPTDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapNhatPTDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapNhatPTDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapNhatPTDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CapNhatPTDialog dialog = new CapNhatPTDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxNVTiem;
    private javax.swing.JButton btnAddVC;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClearVC;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtMaLoVaccine;
    private javax.swing.JTextField txtNgayTiem;
    private javax.swing.JTextField txtTenVaccine;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
        if (obj.equals(btnAddVC)) {
            addChiTietPT();
        } else if (obj.equals(btnCancel)) {
            dispose();
        } else if (obj.equals(btnClearVC)) {
            ClearInputData();
        } else if (obj.equals(btnTimKiem)) {
            TimIdLoVaccine();
        }
    }

    private void addActionListener() {
        btnAddVC.addActionListener(this);
        btnCancel.addActionListener(this);
        btnClearVC.addActionListener(this);
        btnTimKiem.addActionListener(this);
    }

    private void ClearInputData() {
        var textEmpty = "";
        txtMaLoVaccine.setText(textEmpty);
        txtNgayTiem.setText(textEmpty);
        txtTenVaccine.setText(textEmpty);

    }

    private void addChiTietPT() {
        var idLo = txtMaLoVaccine.getText();
        var ngayTiem = txtNgayTiem.getText();
        var nhanVienTiem = ComboBoxNVTiem.getSelectedItem().toString();
        if (!idLo.isEmpty() && !ngayTiem.isEmpty() && !nhanVienTiem.isEmpty()) {

            try {
                chiTietPhieuTiem = new ChiTietPhieuTiem(loVaccine, nhanVienTiem, ngayTiem);
                phieuTiem.setChiTietPhieuTiem(chiTietPhieuTiem);
                homeFrm.capNhatSoLuongMuiTiemConLai(loVaccine);
                homeFrm.UpdatePhieuTiemComeBack(phieuTiem, khoa);
                JOptionPane.showMessageDialog(rootPane, "Cập nhật Phiếu tiêm thành công");
                dispose();
            } catch (InvalidDobException ex) {
                var msg = " .Định dạng thời gian phải ở dạng dd/MM/yyyy. Trong đó dd: ngày sinh; MM: tháng sinh";
                showMessage(ex.getMessage() + msg);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Các ô nhập liệu không được để trống!");
        }
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void TimIdLoVaccine() {
        loVaccine = null;
        var loVaccineId = txtMaLoVaccine.getText().trim();
        if (loVaccineId.isEmpty()) {
            var msg = "Vui lòng nhập mã Lô Vaccine cần tìm";
            showMessage(msg);
        } else {
            for (LoVaccine loVaccine1 : loVaccines) {
                if (loVaccine1.getIdLo().compareTo(loVaccineId) == 0) {
                    var vaccine = loVaccine1.getVaccine();
                    var id = loVaccine1.getIdLo();
                    var ngayNhap = loVaccine1.getNgayNhap();
                    var nsx = loVaccine1.getNsxDate();
                    var hsd = loVaccine1.getHsdDate();
                    var soLuong = loVaccine1.getSoluong();
                    var soLuongConLai = loVaccine1.getSoLuongConLai();
                    var format = "dd/MM/yyyy";

                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);

                    try {
                        loVaccine = new LoVaccine(vaccine, id, simpleDateFormat.format(ngayNhap),
                                simpleDateFormat.format(nsx), simpleDateFormat.format(hsd), soLuong, soLuongConLai);
                    } catch (InvalidDobException ex) {
                        Logger.getLogger(CapNhatPTDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;

                }
            }

            if (loVaccine == null) {
                var msg = "Lô Vaccine này không nằm trong trạm y tế. Xin hãy kiểm tra lại!";
                showMessage(msg);
                txtMaLoVaccine.setText("");
                txtTenVaccine.setText("");

            } else {
                if (loVaccine.getSoLuongConLai() <= 0) {
                    var msg = "Lượng mũi tiêm của lô trên đã hết! Vui lòng nhập lô khác";
                    showMessage(msg);
                    loVaccine = null;
                } else {
                    txtTenVaccine.setText(loVaccine.getVaccine().getName());
                }

            }

        }
    }

}
