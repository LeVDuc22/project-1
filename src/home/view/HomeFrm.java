/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package home.view;

import KTPM.controller.DataController;
import KTPM.controller.DataControllerImp;
import KTPM.controller.InfoFilterImp;
import KTPM.exception.InvalidDobException;
import KTPMfinal.model.LoVaccine;
import KTPMfinal.model.Person;
import KTPMfinal.model.PhieuDangKyTiem;
import KTPMfinal.model.PhieuTiem;
import KTPMfinal.model.Vaccine;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.invoke.MethodHandles;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private List<Vaccine> vaccines;
    private DefaultTableModel tableModelVC;
    private DefaultTableModel tableModelHS;
    private DefaultTableModel tableModelPT;
    private DataController dataController;
    private List<Person> persons;
    private List<LoVaccine> loVaccines;
    private List<PhieuTiem> phieuTiems;
    private DefaultTableModel tableModelLoVC;
    private DefaultTableModel tableModePDKT;
    private List<PhieuDangKyTiem> phieuDangKyTiems;
    
    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup();
        addActionListener();
        vaccines = new ArrayList<>();
        persons = new ArrayList<>();
        loVaccines = new ArrayList<>();
        tableModelVC = (DefaultTableModel) tblVaccine.getModel();
        tableModelHS = (DefaultTableModel) tblHoSo.getModel();
        tableModelLoVC = (DefaultTableModel) tblLoVaccine.getModel();
        tableModelPT = (DefaultTableModel) tblPhieuTiem.getModel();
        dataController = new DataControllerImp();
        tableModePDKT = (DefaultTableModel) tblPhieuDKTiem.getModel();
        loadData();
        showDataVC();
        showDataHS();
        showDataLoVacine();
        showDataPhieuTiem();
        showDataPhieuDkTiem();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSearchVc = new javax.swing.ButtonGroup();
        buttonGroupSearchHoSo = new javax.swing.ButtonGroup();
        buttonGroupSearchLoVC = new javax.swing.ButtonGroup();
        buttonGroupSearchPT = new javax.swing.ButtonGroup();
        buttonGroupSearchPDKT = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        rbNameSearch = new javax.swing.JRadioButton();
        rbDateSearch = new javax.swing.JRadioButton();
        txtNameSearch = new javax.swing.JTextField();
        rbCongDungVC = new javax.swing.JRadioButton();
        txtCongDungVC = new javax.swing.JTextField();
        txtAgeSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVaccine = new javax.swing.JTable();
        btnThemVC = new javax.swing.JButton();
        btnLamMoiVC = new javax.swing.JButton();
        btnXoaVC = new javax.swing.JButton();
        btnSuaVC = new javax.swing.JButton();
        btnTimKiemVC = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        rbMaHoSo = new javax.swing.JRadioButton();
        rbHovaTen = new javax.swing.JRadioButton();
        txtMaHoSo = new javax.swing.JTextField();
        rbCMND = new javax.swing.JRadioButton();
        txtCMND = new javax.swing.JTextField();
        txtHovaTen = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHoSo = new javax.swing.JTable();
        btnTimKiemHoSo = new javax.swing.JButton();
        btnLamMoiHoSo = new javax.swing.JButton();
        btnThemHoSo = new javax.swing.JButton();
        btnSuaHoSo = new javax.swing.JButton();
        btnXoaHoSo = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        rbMaPT = new javax.swing.JRadioButton();
        rbHovaTenPT = new javax.swing.JRadioButton();
        txtMaPT = new javax.swing.JTextField();
        rbTenVaccinePT = new javax.swing.JRadioButton();
        txtVaccinePT = new javax.swing.JTextField();
        txtHovaTenPT = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPhieuTiem = new javax.swing.JTable();
        btnTimKiemPT = new javax.swing.JButton();
        btnCapNhatPT = new javax.swing.JButton();
        btnLamMoiPT = new javax.swing.JButton();
        btnThemPT = new javax.swing.JButton();
        btnXoaPT = new javax.swing.JButton();
        btnUpdatePT = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        rbVaccineDkTiem = new javax.swing.JRadioButton();
        rbDateDkTiem = new javax.swing.JRadioButton();
        txtNameVCpdkt = new javax.swing.JTextField();
        txtDatePdkt = new javax.swing.JTextField();
        rbMaPhieuDkTiem = new javax.swing.JRadioButton();
        rbNameDkTiem = new javax.swing.JRadioButton();
        txtIDmaPdkt = new javax.swing.JTextField();
        txtNamePdkt = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPhieuDKTiem = new javax.swing.JTable();
        btnTimKiemPhieuDk = new javax.swing.JButton();
        btnEditPhieuDkTiem = new javax.swing.JButton();
        btnAddPhieuDkTiem = new javax.swing.JButton();
        btnLamMoiPhieuDkTiem = new javax.swing.JButton();
        btnXoaPhieuDkTiem = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtThongKe = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        ComboBoxTK = new javax.swing.JComboBox<>();
        btnThongKe = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        rbIdVCSearch = new javax.swing.JRadioButton();
        rbIdLoVCSearch = new javax.swing.JRadioButton();
        txtIdVcSearch = new javax.swing.JTextField();
        rbDateLoVCSearch = new javax.swing.JRadioButton();
        txtDateBeginSearch = new javax.swing.JTextField();
        txtIdLoVCSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDateEndSearch = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblLoVaccine = new javax.swing.JTable();
        btnThemLoVC = new javax.swing.JButton();
        btnLamMoiLoVC = new javax.swing.JButton();
        btnXoaLoVC = new javax.swing.JButton();
        btnSuaLoVC = new javax.swing.JButton();
        btnTimKiemLoVC = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý tiêm chủng");
        setResizable(false);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm Vaccine", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        rbNameSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbNameSearch.setText("Theo tên Vaccine");

        rbDateSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbDateSearch.setText("Theo độ tuổi sử dụng");

        txtNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameSearchActionPerformed(evt);
            }
        });

        rbCongDungVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbCongDungVC.setText("Theo công dụng");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbNameSearch)
                    .addComponent(rbCongDungVC)
                    .addComponent(rbDateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCongDungVC, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addComponent(txtNameSearch)
                    .addComponent(txtAgeSearch))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNameSearch)
                    .addComponent(txtNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDateSearch)
                    .addComponent(txtAgeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCongDungVC)
                    .addComponent(txtCongDungVC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        tblVaccine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Vaccine", "Tên Vaccine", "Nhà sản xuất", "Công dụng", "Đối tượng sử dụng", "Số mũi/ người tiêm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVaccine);

        btnThemVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThemVC.setText("Thêm");

        btnLamMoiVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoiVC.setText("Làm mới");

        btnXoaVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoaVC.setText("Xóa");

        btnSuaVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSuaVC.setText("Sửa");

        btnTimKiemVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiemVC.setText("Tìm kiếm");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(btnTimKiemVC)
                        .addGap(79, 79, 79))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnLamMoiVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(btnThemVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnSuaVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnXoaVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnTimKiemVC)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemVC)
                    .addComponent(btnXoaVC)
                    .addComponent(btnLamMoiVC)
                    .addComponent(btnSuaVC))
                .addContainerGap())
        );

        jTabbedPane2.addTab("QUẢN LÝ VACCINE", jPanel6);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm hồ sơ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        rbMaHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbMaHoSo.setText("Theo mã hồ sơ");

        rbHovaTen.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbHovaTen.setText("Theo họ và tên");

        txtMaHoSo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaHoSoActionPerformed(evt);
            }
        });

        rbCMND.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbCMND.setText("Theo CMND/CCCD");

        txtCMND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCMNDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbMaHoSo)
                    .addComponent(rbHovaTen, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbCMND, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtHovaTen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                    .addComponent(txtCMND)
                    .addComponent(txtMaHoSo))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMaHoSo)
                    .addComponent(txtMaHoSo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbHovaTen)
                    .addComponent(txtHovaTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCMND)
                    .addComponent(txtCMND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        tblHoSo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hồ sơ", "Họ và tên", "Năm sinh", "Địa chỉ", "CMND/CCCD", "SĐT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHoSo);
        if (tblHoSo.getColumnModel().getColumnCount() > 0) {
            tblHoSo.getColumnModel().getColumn(5).setHeaderValue("SĐT");
        }

        btnTimKiemHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiemHoSo.setText("Tìm kiếm");

        btnLamMoiHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoiHoSo.setText("Làm mới");

        btnThemHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThemHoSo.setText("Thêm");

        btnSuaHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSuaHoSo.setText("Sửa");

        btnXoaHoSo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoaHoSo.setText("Xóa");
        btnXoaHoSo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHoSoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTimKiemHoSo)
                        .addGap(98, 98, 98))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnLamMoiHoSo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnThemHoSo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnSuaHoSo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(btnXoaHoSo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnTimKiemHoSo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnThemHoSo)
                        .addComponent(btnSuaHoSo)
                        .addComponent(btnXoaHoSo))
                    .addComponent(btnLamMoiHoSo))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("HỒ SƠ NGƯỜI TIÊM", jPanel7);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm phiếu tiêm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        rbMaPT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbMaPT.setText("Theo mã phiếu tiêm");

        rbHovaTenPT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbHovaTenPT.setText("Theo họ và tên");

        txtMaPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaPTActionPerformed(evt);
            }
        });

        rbTenVaccinePT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbTenVaccinePT.setText("Theo loại Vaccine tiêm");

        txtVaccinePT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVaccinePTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbMaPT)
                    .addComponent(rbHovaTenPT, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbTenVaccinePT, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtHovaTenPT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addComponent(txtVaccinePT)
                    .addComponent(txtMaPT))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMaPT)
                    .addComponent(txtMaPT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbHovaTenPT)
                    .addComponent(txtHovaTenPT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbTenVaccinePT)
                    .addComponent(txtVaccinePT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        tblPhieuTiem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã phiếu tiêm", "Mã người tiêm", "Họ và tên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblPhieuTiem);

        btnTimKiemPT.setText("Tìm kiếm");

        btnCapNhatPT.setText("Xem chi tiết phiếu tiêm");

        btnLamMoiPT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoiPT.setText("Làm mới");

        btnThemPT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThemPT.setText("Thêm");
        btnThemPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemPTActionPerformed(evt);
            }
        });

        btnXoaPT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoaPT.setText("Xóa");

        btnUpdatePT.setText("Cập nhật phiếu tiêm");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnXoaPT, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(btnLamMoiPT, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnThemPT, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(304, 304, 304))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnTimKiemPT, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(67, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCapNhatPT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdatePT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(btnTimKiemPT)
                        .addGap(58, 58, 58)))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnCapNhatPT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(btnUpdatePT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemPT)
                    .addComponent(btnLamMoiPT)
                    .addComponent(btnXoaPT))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel15.getAccessibleContext().setAccessibleName("Tìm kiếm Phiếu Tiêm");
        jPanel15.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("QUẢN LÝ PHIẾU TIÊM", jPanel8);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm phiếu đăng ký tiêm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel1.setToolTipText("Tìm kiếm phiếu đăng ký tiêm");
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel1.setName("Tìm kiếm phiếu đăng ký tiêm"); // NOI18N

        rbVaccineDkTiem.setText("Theo loại Vaccine đăng ký");

        rbDateDkTiem.setText("Theo ngày đăng ký tiêm");

        rbMaPhieuDkTiem.setText("Theo mã phiếu đăng ký tiêm");

        rbNameDkTiem.setText("Theo tên người đăng ký");

        txtIDmaPdkt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDmaPdktActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbMaPhieuDkTiem)
                    .addComponent(rbNameDkTiem)
                    .addComponent(txtIDmaPdkt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNamePdkt, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtNameVCpdkt, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbVaccineDkTiem)
                            .addComponent(txtDatePdkt, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(rbDateDkTiem))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbVaccineDkTiem)
                    .addComponent(rbMaPhieuDkTiem))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtIDmaPdkt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNameVCpdkt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbNameDkTiem)
                    .addComponent(rbDateDkTiem))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatePdkt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNamePdkt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tblPhieuDKTiem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phiếu tiêm", "Họ và tên", "SĐT", "Loại Vaccine đăng ký", "Ngày đăng ký tiêm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblPhieuDKTiem);

        btnTimKiemPhieuDk.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiemPhieuDk.setText("Tìm kiếm");

        btnEditPhieuDkTiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditPhieuDkTiem.setText("Sửa");

        btnAddPhieuDkTiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddPhieuDkTiem.setText("Thêm ");

        btnLamMoiPhieuDkTiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoiPhieuDkTiem.setText("Làm mới");

        btnXoaPhieuDkTiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoaPhieuDkTiem.setText("Xóa");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addContainerGap())
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnLamMoiPhieuDkTiem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnAddPhieuDkTiem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnEditPhieuDkTiem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(btnXoaPhieuDkTiem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTimKiemPhieuDk, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(btnTimKiemPhieuDk)
                        .addGap(67, 67, 67)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPhieuDkTiem)
                    .addComponent(btnEditPhieuDkTiem)
                    .addComponent(btnXoaPhieuDkTiem)
                    .addComponent(btnLamMoiPhieuDkTiem))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("TÌM KIẾM PHIẾU ĐÂNG KÝ TIÊM");

        jTabbedPane2.addTab("QUẢN LÝ PHIẾU ĐĂNG KÝ TIÊM", jPanel9);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Báo cáo - Thống kê", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N

        jScrollPane6.setViewportView(txtThongKe);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Lựa chọn phương án");

        ComboBoxTK.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ComboBoxTK.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thống kê số lượng mũi tiêm của từng loại Vaccine", "Thống kê lô Vaccine hết hạn", "Thống kế số lượng phiếu tiêm", "Thống kê số lượng phiếu đăng ký tiêm", "Thống kê loại Vaccine cần nhập" }));

        btnThongKe.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThongKe.setText("Thống kê");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(ComboBoxTK, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ComboBoxTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThongKe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Gửi Email");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jButton2))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton2)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("BÁO CÁO - THỐNG KÊ", jPanel10);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm lô Vaccine", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        rbIdVCSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbIdVCSearch.setText("Theo mã Vaccine");

        rbIdLoVCSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbIdLoVCSearch.setText("Theo mã Lô");

        txtIdVcSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdVcSearchActionPerformed(evt);
            }
        });

        rbDateLoVCSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbDateLoVCSearch.setText("Theo ngày nhập");
        rbDateLoVCSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDateLoVCSearchActionPerformed(evt);
            }
        });

        txtDateBeginSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Từ ngày:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Đến ngày:");

        txtDateEndSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtDateEndSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateEndSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbIdVCSearch)
                    .addComponent(rbDateLoVCSearch)
                    .addComponent(rbIdLoVCSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdVcSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addComponent(txtIdLoVCSearch)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateBeginSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateEndSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbIdVCSearch)
                    .addComponent(txtIdVcSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbIdLoVCSearch)
                    .addComponent(txtIdLoVCSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDateLoVCSearch)
                    .addComponent(txtDateBeginSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtDateEndSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        tblLoVaccine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Vaccine", "Mã Lô Vaccine", "Ngày sản xuất", "Hạn sử dụng", "Ngày nhập", "Số lượng nhập", "Số lượng còn lại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblLoVaccine);

        btnThemLoVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThemLoVC.setText("Thêm");

        btnLamMoiLoVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLamMoiLoVC.setText("Làm mới");

        btnXoaLoVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoaLoVC.setText("Xóa");

        btnSuaLoVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSuaLoVC.setText("Sửa");

        btnTimKiemLoVC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiemLoVC.setText("Tìm kiếm");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(btnTimKiemLoVC)
                        .addGap(79, 79, 79))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(btnLamMoiLoVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnThemLoVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnSuaLoVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162)
                        .addComponent(btnXoaLoVC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnTimKiemLoVC)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXoaLoVC)
                    .addComponent(btnSuaLoVC)
                    .addComponent(btnThemLoVC)
                    .addComponent(btnLamMoiLoVC))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("QUẢN LÝ LÔ VACCINE", jPanel13);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void txtDateEndSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateEndSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateEndSearchActionPerformed

    private void rbDateLoVCSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDateLoVCSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbDateLoVCSearchActionPerformed

    private void txtIdVcSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdVcSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdVcSearchActionPerformed

    private void txtIDmaPdktActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDmaPdktActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDmaPdktActionPerformed

    private void btnThemPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemPTActionPerformed

    }//GEN-LAST:event_btnThemPTActionPerformed

    private void txtVaccinePTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVaccinePTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVaccinePTActionPerformed

    private void txtMaPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaPTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaPTActionPerformed

    private void btnXoaHoSoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHoSoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnXoaHoSoActionPerformed

    private void txtCMNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCMNDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCMNDActionPerformed

    private void txtMaHoSoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaHoSoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaHoSoActionPerformed

    private void txtNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxTK;
    private javax.swing.JButton btnAddPhieuDkTiem;
    private javax.swing.JButton btnCapNhatPT;
    private javax.swing.JButton btnEditPhieuDkTiem;
    private javax.swing.JButton btnLamMoiHoSo;
    private javax.swing.JButton btnLamMoiLoVC;
    private javax.swing.JButton btnLamMoiPT;
    private javax.swing.JButton btnLamMoiPhieuDkTiem;
    private javax.swing.JButton btnLamMoiVC;
    private javax.swing.JButton btnSuaHoSo;
    private javax.swing.JButton btnSuaLoVC;
    private javax.swing.JButton btnSuaVC;
    private javax.swing.JButton btnThemHoSo;
    private javax.swing.JButton btnThemLoVC;
    private javax.swing.JButton btnThemPT;
    private javax.swing.JButton btnThemVC;
    private javax.swing.JButton btnThongKe;
    private javax.swing.JButton btnTimKiemHoSo;
    private javax.swing.JButton btnTimKiemLoVC;
    private javax.swing.JButton btnTimKiemPT;
    private javax.swing.JButton btnTimKiemPhieuDk;
    private javax.swing.JButton btnTimKiemVC;
    private javax.swing.JButton btnUpdatePT;
    private javax.swing.JButton btnXoaHoSo;
    private javax.swing.JButton btnXoaLoVC;
    private javax.swing.JButton btnXoaPT;
    private javax.swing.JButton btnXoaPhieuDkTiem;
    private javax.swing.JButton btnXoaVC;
    private javax.swing.ButtonGroup buttonGroupSearchHoSo;
    private javax.swing.ButtonGroup buttonGroupSearchLoVC;
    private javax.swing.ButtonGroup buttonGroupSearchPDKT;
    private javax.swing.ButtonGroup buttonGroupSearchPT;
    private javax.swing.ButtonGroup buttonGroupSearchVc;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JRadioButton rbCMND;
    private javax.swing.JRadioButton rbCongDungVC;
    private javax.swing.JRadioButton rbDateDkTiem;
    private javax.swing.JRadioButton rbDateLoVCSearch;
    private javax.swing.JRadioButton rbDateSearch;
    private javax.swing.JRadioButton rbHovaTen;
    private javax.swing.JRadioButton rbHovaTenPT;
    private javax.swing.JRadioButton rbIdLoVCSearch;
    private javax.swing.JRadioButton rbIdVCSearch;
    private javax.swing.JRadioButton rbMaHoSo;
    private javax.swing.JRadioButton rbMaPT;
    private javax.swing.JRadioButton rbMaPhieuDkTiem;
    private javax.swing.JRadioButton rbNameDkTiem;
    private javax.swing.JRadioButton rbNameSearch;
    private javax.swing.JRadioButton rbTenVaccinePT;
    private javax.swing.JRadioButton rbVaccineDkTiem;
    private javax.swing.JTable tblHoSo;
    private javax.swing.JTable tblLoVaccine;
    private javax.swing.JTable tblPhieuDKTiem;
    private javax.swing.JTable tblPhieuTiem;
    private javax.swing.JTable tblVaccine;
    private javax.swing.JTextField txtAgeSearch;
    private javax.swing.JTextField txtCMND;
    private javax.swing.JTextField txtCongDungVC;
    private javax.swing.JTextField txtDateBeginSearch;
    private javax.swing.JTextField txtDateEndSearch;
    private javax.swing.JTextField txtDatePdkt;
    private javax.swing.JTextField txtHovaTen;
    private javax.swing.JTextField txtHovaTenPT;
    private javax.swing.JTextField txtIDmaPdkt;
    private javax.swing.JTextField txtIdLoVCSearch;
    private javax.swing.JTextField txtIdVcSearch;
    private javax.swing.JTextField txtMaHoSo;
    private javax.swing.JTextField txtMaPT;
    private javax.swing.JTextField txtNamePdkt;
    private javax.swing.JTextField txtNameSearch;
    private javax.swing.JTextField txtNameVCpdkt;
    private javax.swing.JTextPane txtThongKe;
    private javax.swing.JTextField txtVaccinePT;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        //Đối với các lựa chọn tìm kiếm VC
        buttonGroupSearchVc.add(rbNameSearch);
        buttonGroupSearchVc.add(rbDateSearch);
        buttonGroupSearchVc.add(rbCongDungVC);
        //Đối với các lựa chọn tìm kiếm HS
        buttonGroupSearchHoSo.add(rbCMND);
        buttonGroupSearchHoSo.add(rbMaHoSo);
        buttonGroupSearchHoSo.add(rbHovaTen);
        //Đối với các lựa chọn tìm kiếm Lô VC
        buttonGroupSearchLoVC.add(rbIdLoVCSearch);
        buttonGroupSearchLoVC.add(rbDateLoVCSearch);
        buttonGroupSearchLoVC.add(rbIdVCSearch);
        //Đối với các lựa chọn tìm kiếm PT
        buttonGroupSearchPT.add(rbHovaTenPT);
        buttonGroupSearchPT.add(rbMaPT);
        buttonGroupSearchPT.add(rbTenVaccinePT);
        // Đối với các lựa chọn tìm kiếu PDKT
        buttonGroupSearchPDKT.add(rbDateDkTiem);
        buttonGroupSearchPDKT.add(rbMaPhieuDkTiem);
        buttonGroupSearchPDKT.add(rbVaccineDkTiem);
        buttonGroupSearchPDKT.add(rbNameDkTiem);
    }

    private void addActionListener() {
        //quản lý vaccine
        btnThemVC.addActionListener(this);
        btnSuaVC.addActionListener(this);
        btnLamMoiVC.addActionListener(this);
        btnTimKiemVC.addActionListener(this);
        btnXoaVC.addActionListener(this);
        rbCongDungVC.addActionListener(this);
        rbDateSearch.addActionListener(this);
        rbNameSearch.addActionListener(this);
        //quản lý hồ sơ       
        btnThemHoSo.addActionListener(this);
        btnLamMoiHoSo.addActionListener(this);
        btnSuaHoSo.addActionListener(this);
        btnXoaHoSo.addActionListener(this);
        btnTimKiemHoSo.addActionListener(this);
        rbHovaTen.addActionListener(this);
        rbMaHoSo.addActionListener(this);
        rbCMND.addActionListener(this);
        // quản lý lô Vaccine
        btnLamMoiLoVC.addActionListener(this);
        btnThemLoVC.addActionListener(this);
        btnTimKiemLoVC.addActionListener(this);
        btnXoaLoVC.addActionListener(this);
        btnSuaLoVC.addActionListener(this);
        rbDateLoVCSearch.addActionListener(this);
        rbIdLoVCSearch.addActionListener(this);
        rbIdVCSearch.addActionListener(this);
        // quản lý phiếu tiêm
        btnCapNhatPT.addActionListener(this);
        btnLamMoiPT.addActionListener(this);
        btnThemPT.addActionListener(this);
        btnXoaPT.addActionListener(this);
        rbHovaTenPT.addActionListener(this);
        rbMaPT.addActionListener(this);
        btnUpdatePT.addActionListener(this);
        rbTenVaccinePT.addActionListener(this);
        btnTimKiemPT.addActionListener(this);
        // Quản lý phiếu đăng ký tiêm
        btnAddPhieuDkTiem.addActionListener(this);
        btnEditPhieuDkTiem.addActionListener(this);
        btnLamMoiPhieuDkTiem.addActionListener(this);
        btnTimKiemPhieuDk.addActionListener(this);
        btnXoaPhieuDkTiem.addActionListener(this);
        rbDateDkTiem.addActionListener(this);
        rbMaPhieuDkTiem.addActionListener(this);
        rbVaccineDkTiem.addActionListener(this);
        rbNameDkTiem.addActionListener(this);
        //Thống kê
        btnThongKe.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //Thực hiện các hành động
        var obj = e.getSource();
        if (obj.equals(btnThemVC)) {
            AddVaccineDialog addVaccineDialog = new AddVaccineDialog(this, rootPaneCheckingEnabled);
            addVaccineDialog.setVisible(rootPaneCheckingEnabled);
        } else if (obj.equals(btnXoaVC)) {
            xoaVaccine();
        } else if (obj.equals(btnSuaVC)) {
            suaVaccine();
        } else if (obj.equals(btnTimKiemVC)) {
            searchVaccine();
        } else if (obj.equals(btnLamMoiVC)) {
            refreshVaccine();
            //Các hành động đối với Hồ Sơ Người Tiêm
        } else if (obj.equals(btnThemHoSo)) {
            addNewHoSo();
        } else if (obj.equals(btnSuaHoSo)) {
            suaHoSo();
        } else if (obj.equals(btnXoaHoSo)) {
            xoaHoSo();
        } else if (obj.equals(btnTimKiemHoSo)) {
            searchHoSo();
        } else if (obj.equals(rbHovaTen) || obj.equals(rbCMND) || obj.equals(rbMaHoSo)) {
            checkSearchHoSo();
        } else if (obj.equals(btnLamMoiHoSo)) {
            lamMoiBangHoSo();
        } //Các hành động đối với Lô Vaccine
        else if (obj.equals(btnThemLoVC)) {
            addNewLoVaccine();
        } else if (obj.equals(btnSuaLoVC)) {
            suaLoVaccine();
        } else if (obj.equals(btnXoaLoVC)) {
            xoaLoVaccine();
        } else if (obj.equals(btnLamMoiLoVC)) {
            lamMoiBangLoVaccine();
        } else if (obj.equals(btnTimKiemLoVC)) {
            searchLoVaccine();
        } else if (obj.equals(rbDateLoVCSearch) || obj.equals(rbIdVCSearch) || obj.equals(rbIdLoVCSearch)) {
            checkSearchLoVaccine();
        } // Các hành động đối với phiếu tiêm
        else if (obj.equals(btnThemPT)) {
            addPhieuTiem();
        } else if (obj.equals(btnCapNhatPT)) {
            XemChiTietPT();
        } else if (obj.equals(btnUpdatePT)) {
            CapNhatChiTietPT();
        } else if (obj.equals(btnXoaPT)) {
            XoaPT();
        } else if (obj.equals(btnLamMoiPT)) {
            lamMoiBangPT();
        } else if (obj.equals(rbHovaTenPT) || obj.equals(rbMaPT) || obj.equals(rbTenVaccinePT)) {
            checkSearchPhieuTiem();
        } else if (obj.equals(btnTimKiemPT)) {
            searchPhieuTiem();
        } // Các hành động với phiếu đăng ký tiêm
        else if (obj.equals(btnAddPhieuDkTiem)) {
            addPhieuDkTiem();
        } else if (obj.equals(btnEditPhieuDkTiem)) {
            suaPhieuDkTiem();
        } else if (obj.equals(btnXoaPhieuDkTiem)) {
            XoaPDKT();
        } else if (obj.equals(rbDateDkTiem) || obj.equals(rbMaPhieuDkTiem)
                || obj.equals(rbNameDkTiem) || obj.equals(rbVaccineDkTiem)) {
            checkSearchPhieuDkTiem();
        } else if (obj.equals(btnLamMoiPhieuDkTiem)) {
            lamMoiBangPDKT();
        } else if (obj.equals(btnTimKiemPhieuDk)) {
            searchPhieuDkTiem();
        }
        else if(obj.equals(btnThongKe)){
            thongKe();
        }
    }

    public void AddVaccineComeBack(Vaccine vaccine) {
        vaccines.add(vaccine);
        CreTable(vaccine);
        saveData(DataController.VACCINE);

    }

    public void AddPersonComeBack(Person person) {
        persons.add(person);
        CreTable_Person(person);
        saveData(DataController.HOSO);
    }

    public void AddLoVacineComeBack(LoVaccine loVaccine) {
        loVaccines.add(loVaccine);
        CreTable_LoVaccine(loVaccine);
        saveData(DataController.LOVACCINE);
    }

    public void AddPhieuTiemComeBack(PhieuTiem phieuTiem) {
        phieuTiems.add(phieuTiem);
        CreTable_PhieuTiem(phieuTiem);
        saveData(DataController.PHIEUTIEM);
    }

    public void AddPhieuDkTiemComeBack(PhieuDangKyTiem phieuDangKyTiem) {
        phieuDangKyTiems.add(phieuDangKyTiem);
        CreTable_PhieuDkTiem(phieuDangKyTiem);
        saveData(DataController.PHIEUDK);
    }

    private void CreTable(Vaccine vaccine) {
        Object rowObject[] = new Object[]{
            vaccine.getId(), vaccine.getName(), vaccine.getMaLo(),
            vaccine.getCongdung(), vaccine.getNgaynhap(), vaccine.getSoluong()
        };
        tableModelVC.addRow(rowObject);
    }

    private void showDataVC() {
        for (Vaccine vaccine : vaccines) {
            CreTable(vaccine);
        }
    }

    private void loadData() {
        //Doc File Vaccine
        vaccines = dataController.<Vaccine>readToFile(DataController.Vaccine_File);
        editVaccineId();
        //Doc File Hồ Sơ
        persons = dataController.<Person>readToFile(DataController.HoSo_File);
        //Doc File LoVC
        loVaccines = dataController.<LoVaccine>readToFile(DataController.LoVaccine_File);
        //Doc File PhieuTiem
        phieuTiems = dataController.<PhieuTiem>readToFile(DataController.PhieuTiem_File);
        //Doc File Phieu Dang ky tiem
        phieuDangKyTiems = dataController.<PhieuDangKyTiem>readToFile(DataController.PhieuDKtiem_File);
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.VACCINE: {
                dataController.<Vaccine>writeToFile(vaccines, DataController.Vaccine_File);
                break;
            }
            case DataController.HOSO: {
                dataController.<Person>writeToFile(persons, DataController.HoSo_File);
                break;
            }
            case DataController.LOVACCINE: {
                dataController.<LoVaccine>writeToFile(loVaccines, DataController.LoVaccine_File);
                break;
            }
            case DataController.PHIEUTIEM: {
                dataController.<PhieuTiem>writeToFile(phieuTiems, DataController.PhieuTiem_File);
                break;
            }
            case DataController.PHIEUDK: {
                dataController.<PhieuDangKyTiem>writeToFile(phieuDangKyTiems, DataController.PhieuDKtiem_File);
            }
        }
    }

    private void editVaccineId() {
        int MaxId = Vaccine.getsId();
        for (Vaccine vaccine : vaccines) {
            if (MaxId < vaccine.getId()) {
                MaxId = vaccine.getId();
            }
        }
        Vaccine.setsId(MaxId + 1);
    }

    private void xoaVaccine() {
        var select = tblVaccine.getSelectedRow();
        if (select > -1) {
            int confirm = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc chắn muốn xóa bản ghi này không");
            if (confirm == JOptionPane.OK_OPTION) {
                tableModelVC.removeRow(select);
                vaccines.remove(select);
                dataController.<Vaccine>writeToFile(vaccines, DataController.Vaccine_File);
                JOptionPane.showMessageDialog(rootPane, "Xóa bản ghi thành công!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
        }
    }

    private void suaVaccine() {
        var select = tblVaccine.getSelectedRow();
        if (select > -1) {
            EditVaccineDialog editVaccineDialog
                    = new EditVaccineDialog(this, rootPaneCheckingEnabled, vaccines.get(select));
            editVaccineDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để chỉnh sửa!");
        }
    }

    public void EditVaccineComeBack(Vaccine vaccine) {
        var select = tblVaccine.getSelectedRow();
        vaccines.remove(select);
        vaccines.add(select, vaccine);
        tableModelVC.removeRow(select);
        Object rowObject[] = {
            vaccine.getId(), vaccine.getName(), vaccine.getMaLo(),
            vaccine.getCongdung(), vaccine.getNgaynhap(), vaccine.getSoluong()
        };
        tableModelVC.insertRow(select, rowObject);
        saveData(DataController.VACCINE);

    }

    private void searchVaccine() {
        if (rbNameSearch.isSelected()) {
            var result = txtNameSearch.getText();
            if (!result.isEmpty()) {
                var vaccines1 = dataController.SearchVaccine(vaccines, result);
                vaccines.clear();
                vaccines.addAll(vaccines1);
                if (vaccines1.size() > 0) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Tìm thấy " + vaccines1.size() + " kết quả");
                    showVaccines();
                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "Không tồn tại loại Vaccine cần tìm trong danh sách");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Vaccine cần tìm kiếm!");
            }
        } else if (rbDateSearch.isSelected()) {
            var result = txtAgeSearch.getText();
           if (!result.isEmpty()) {
                var vaccines1 = dataController.SearchVaccineByDTSD(vaccines, result);
                vaccines.clear();
                vaccines.addAll(vaccines1);
                if (vaccines1.size() > 0) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Tìm thấy " + vaccines1.size() + " kết quả");
                    showVaccines();
                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "Không tồn tại loại Vaccine cần tìm trong danh sách");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Vaccine cần tìm kiếm!");
            }
        } else if (rbCongDungVC.isSelected()) {
            var result = txtCongDungVC.getText();
            if (!result.isEmpty()) {
                var vaccines1 = dataController.SearchVaccine(vaccines,
                        result, DataController.TIMKIEMTHEOCONGDUNG);
                vaccines.clear();
                vaccines.addAll(vaccines1);
                if (vaccines1.size() > 0) {
                    JOptionPane.showMessageDialog(rootPane,
                            "Tìm thấy " + vaccines1.size() + " kết quả");
                    showVaccines();
                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "Không tồn tại loại Vaccine cần tìm trong danh sách");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Vaccine cần tìm kiếm!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Vui lòng chọn tiêu chí tìm kiếm!");
        }
    }

    private void refreshVaccine() {
        vaccines.clear();
        vaccines.addAll(dataController.<Vaccine>readToFile(DataController.Vaccine_File));
        txtCongDungVC.setText("");
        txtNameSearch.setText("");
        showVaccines();
    }

    private void showVaccines() {
        tableModelVC.setRowCount(0);
        for (Vaccine vaccine : vaccines) {
            CreTable(vaccine);
        }
    }
    ///Thao tác với Hồ sơ người tiêm

    private void addNewHoSo() {
        AddHoSoDialog addHoSoDialog = new AddHoSoDialog(this, rootPaneCheckingEnabled, persons);
        addHoSoDialog.setVisible(true);
    }

    private void CreTable_Person(Person person) {
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            person.getId(), person.getFullname(), simpleDateFormat.format(person.getDob()),
            person.getAddress(), person.getCmnd(), person.getSDT()
        };
        tableModelHS.addRow(row);
    }

    private void showDataHS() {
        tableModelHS.setRowCount(0);
        for (Person person : persons) {
            CreTable_Person(person);
        }
    }

    private void suaHoSo() {
        var select = tblHoSo.getSelectedRow();
        if (select > -1) {
            EditHoSoDialog editHoSoDialog = new EditHoSoDialog(
                    this, rootPaneCheckingEnabled, persons.get(select));
            editHoSoDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để chỉnh sửa!");
        }
    }

    public void EditHoSoComeBack(Person person) {
        var select = tblHoSo.getSelectedRow();
        persons.remove(select);
        persons.add(select, person);
        tableModelHS.removeRow(select);
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object rowObject[] = {
            person.getId(), person.getFullname(), simpleDateFormat.format(person.getDob()),
            person.getAddress(), person.getCmnd(), person.getSDT()
        };
        tableModelHS.insertRow(select, rowObject);
        saveData(DataController.HOSO);

    }

    private void xoaHoSo() {
        var select = tblHoSo.getSelectedRow();
        if (select > -1) {
            int confirm = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc chắn muốn xóa bản ghi này không");
            if (confirm == JOptionPane.OK_OPTION) {
                tableModelHS.removeRow(select);
                persons.remove(select);
                dataController.<Person>writeToFile(persons, DataController.HoSo_File);
                JOptionPane.showMessageDialog(rootPane, "Xóa bản ghi thành công!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
        }
    }

    private void searchHoSo() {
        reloadHoSo();
        if (rbHovaTen.isSelected()) {
            var result = txtHovaTen.getText();
            if (!result.isEmpty()) {
                var person1 = dataController.SearchPersonByName(persons, result);
                persons.clear();
                persons.addAll(person1);
                checkAndshowHoSo();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Họ và tên cần tìm kiếm!");
            }
        } else if (rbMaHoSo.isSelected()) {
            var result = txtMaHoSo.getText();
            if (!result.isEmpty()) {
                var person1 = dataController.SearchPersonById(persons, result);
                persons.clear();
                persons.addAll(person1);
                checkAndshowHoSo();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Mã hồ sơ cần tìm kiếm!");
            }
        } else if (rbCMND.isSelected()) {
            var result = txtCMND.getText();
            if (!result.isEmpty()) {
                var person1 = dataController.SearchPersonByCMND(persons, result);
                persons.clear();
                persons.addAll(person1);
                checkAndshowHoSo();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập CMND hoặc CCCD cần tìm kiếm!");
            }
        }
    }

    private void reloadHoSo() {
        persons.clear();
        persons.addAll(dataController.<Person>readToFile(DataController.HoSo_File));
    }

    private void lamMoiBangHoSo() {
        txtCMND.setEnabled(true);
        txtHovaTen.setEnabled(true);
        txtMaHoSo.setEnabled(true);
        txtCMND.setText("");
        txtHovaTen.setText("");
        txtMaHoSo.setText("");
        tableModelHS.setRowCount(0);
        reloadHoSo();
        showDataHS();
    }

    private void checkSearchHoSo() {
        if (rbCMND.isSelected()) {
            txtCMND.setEnabled(true);
            txtHovaTen.setEnabled(false);
            txtMaHoSo.setEnabled(false);
        }
        if (rbHovaTen.isSelected()) {
            txtHovaTen.setEnabled(true);
            txtCMND.setEnabled(false);
            txtMaHoSo.setEnabled(false);
        }
        if (rbMaHoSo.isSelected()) {
            txtMaHoSo.setEnabled(true);
            txtHovaTen.setEnabled(false);
            txtCMND.setEnabled(false);
        }
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void checkAndshowHoSo() {
        if (persons.size() > 0) {
            var msg = "Tìm thấy " + persons.size() + " kết quả!";
            showMessage(msg);
            showDataHS();
        } else {
            var msg1 = "Đối tượng cần tìm không nằm trong danh sách!";
            showMessage(msg1);
            persons.clear();
            showDataHS();
        }
    }

    /// Thao tác với lô Vaccine:
    private void addNewLoVaccine() {
        AddLoVaccineDialog addLoVaccineDialog = new AddLoVaccineDialog(
                this, rootPaneCheckingEnabled, loVaccines, vaccines);
        addLoVaccineDialog.setVisible(true);

    }

    private void CreTable_LoVaccine(LoVaccine loVaccine) {
        var format1 = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format1);
        Object[] row = new Object[]{
            loVaccine.getVaccine().getId(), loVaccine.getIdLo(), simpleDateFormat.format(loVaccine.getNsxDate()),
            simpleDateFormat.format(loVaccine.getHsdDate()), simpleDateFormat.format(loVaccine.getNgayNhap()),
            loVaccine.getSoluong(), loVaccine.getSoLuongConLai()
        };
        tableModelLoVC.addRow(row);
    }

    private void showDataLoVacine() {
        tableModelLoVC.setRowCount(0);
        for (LoVaccine lovc : loVaccines) {
            CreTable_LoVaccine(lovc);
        }
    }

    private void suaLoVaccine() {
        var select = tblLoVaccine.getSelectedRow();
        if (select > -1) {
            EditLoVaccineDialog editLoVaccine = new EditLoVaccineDialog(this, rootPaneCheckingEnabled,
                    loVaccines.get(select), vaccines);
            editLoVaccine.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để chỉnh sửa!");
        }
    }

    public void EditLoVcComeBack(LoVaccine loVaccine) {
        var select = tblLoVaccine.getSelectedRow();
        loVaccines.remove(select);
        loVaccines.add(select, loVaccine);
        tableModelLoVC.removeRow(select);
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            loVaccine.getVaccine().getId(), loVaccine.getIdLo(), simpleDateFormat.format(loVaccine.getNsxDate()),
            simpleDateFormat.format(loVaccine.getHsdDate()), simpleDateFormat.format(loVaccine.getNgayNhap()),
            loVaccine.getSoluong(), loVaccine.getSoLuongConLai(),};
        tableModelLoVC.insertRow(select, row);
        saveData(DataController.LOVACCINE);

    }

    private void xoaLoVaccine() {
        var select = tblLoVaccine.getSelectedRow();
        if (select > -1) {
            int confirm = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc chắn muốn xóa bản ghi này không");
            if (confirm == JOptionPane.OK_OPTION) {
                tableModelLoVC.removeRow(select);
                loVaccines.remove(select);
                dataController.<LoVaccine>writeToFile(loVaccines, DataController.LoVaccine_File);
                JOptionPane.showMessageDialog(rootPane, "Xóa bản ghi thành công!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
        }
    }

    private void checkSearchLoVaccine() {
        if (rbIdLoVCSearch.isSelected()) {
            txtIdLoVCSearch.setEnabled(true);
            txtIdVcSearch.setEnabled(false);
            txtDateBeginSearch.setEnabled(false);
            txtDateEndSearch.setEnabled(false);
        }
        if (rbIdVCSearch.isSelected()) {
            txtIdLoVCSearch.setEnabled(false);
            txtIdVcSearch.setEnabled(true);
            txtDateBeginSearch.setEnabled(false);
            txtDateEndSearch.setEnabled(false);
        }
        if (rbDateLoVCSearch.isSelected()) {
            txtIdLoVCSearch.setEnabled(false);
            txtIdVcSearch.setEnabled(false);
            txtDateBeginSearch.setEnabled(true);
            txtDateEndSearch.setEnabled(true);
        }
    }

    private void searchLoVaccine() {
        reloadLoVaccine();
        if (rbIdVCSearch.isSelected()) {
            var result = txtIdVcSearch.getText();
            if (!result.isEmpty()) {
                var loVaccine1 = dataController.SearchLoVacineByIdVaccine(
                        loVaccines, Integer.parseInt(result));
                loVaccines.clear();
                loVaccines.addAll(loVaccine1);
                checkAndshowLoVaccine();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Mã Vaccine cần tìm kiếm!");
            }
        } else if (rbIdLoVCSearch.isSelected()) {
            var result = txtIdLoVCSearch.getText();
            if (!result.isEmpty()) {
                var loVaccine1 = dataController.SearchLoVacineById(loVaccines, result);
                loVaccines.clear();
                loVaccines.addAll(loVaccine1);
                checkAndshowLoVaccine();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Mã Lô Vaccine cần tìm kiếm!");
            }
        } else if (rbDateLoVCSearch.isSelected()) {
            var result1 = txtDateBeginSearch.getText();
            var result2 = txtDateEndSearch.getText();
            if (!result1.isEmpty() || !result2.isEmpty()) {
                try {
                    long timeBegin = chuyenDoiThoiGian(result1);
                    long timeFinish = chuyenDoiThoiGian(result2);
                    if (timeBegin == 0 || timeFinish == 0) {
                        var msg = "Nhập sai định dạng ngày! Ngày-tháng-năm có dạng: dd/MM/yyyy ";
                        showMessage(msg);
                    } else if (timeBegin > timeFinish) {
                        var msg = "Ngày Kết thúc tìm kiếm không thể sớm hơn ngày bắt đầu!";
                        showMessage(msg);
                    } else {
                        var loVaccine1 = dataController.SearchLoVacineByDate(loVaccines, timeBegin, timeFinish);
                        loVaccines.clear();
                        loVaccines.addAll(loVaccine1);
                        checkAndshowLoVaccine();
                    }
                } catch (InvalidDobException ex) {
                    Logger.getLogger(HomeFrm.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Ngày nhập Vaccine cần tìm kiếm!");
            }
        }
    }

    private void reloadLoVaccine() {
        loVaccines.clear();
        loVaccines.addAll(dataController.<LoVaccine>readToFile(DataController.LoVaccine_File));
    }

    private void checkAndshowLoVaccine() {
        if (loVaccines.size() > 0) {
            var msg = "Tìm thấy " + loVaccines.size() + " kết quả!";
            showMessage(msg);
            showDataLoVacine();
        } else {
            var msg1 = "Đối tượng cần tìm không nằm trong danh sách!";
            showMessage(msg1);
            loVaccines.clear();
            showDataLoVacine();
        }
    }

    private long chuyenDoiThoiGian(String result1) throws InvalidDobException {
        InfoFilterImp infoFilter = new InfoFilterImp();
        try {
            if (infoFilter.isDobValid(result1)) {
                var dobStr = "dd/MM/yyyy";
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dobStr);
                Date date = simpleDateFormat.parse(result1);
                var time = date.getTime();
                return time;

            }
        } catch (InvalidDobException ex) {
            throw ex;
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    private void lamMoiBangLoVaccine() {
        txtIdLoVCSearch.setEnabled(true);
        txtIdVcSearch.setEnabled(true);
        txtDateBeginSearch.setEnabled(true);
        txtDateEndSearch.setEnabled(true);
        txtIdLoVCSearch.setText("");
        txtIdVcSearch.setText("");
        txtDateBeginSearch.setText("");
        txtDateEndSearch.setText("");
        tableModelLoVC.setRowCount(0);
        reloadLoVaccine();
        showDataLoVacine();
    }
    // Thao tác với Phiếu Tiêm

    private void addPhieuTiem() {
        AddPhieuTiem addPhieuTiem = new AddPhieuTiem(this,
                rootPaneCheckingEnabled, loVaccines, phieuTiems, persons);
        addPhieuTiem.setVisible(true);

    }

    private void CreTable_PhieuTiem(PhieuTiem phieuTiem) {

        Object[] row = new Object[]{
            phieuTiem.getIdPhieuTiem(), phieuTiem.getPerson().getId(), phieuTiem.getPerson().getFullname()
        };
        tableModelPT.addRow(row);
    }

    private void showDataPhieuTiem() {
        tableModelPT.setRowCount(0);
        for (PhieuTiem phieuTiem : phieuTiems) {
            CreTable_PhieuTiem(phieuTiem);
        }
    }

    public void capNhatSoLuongMuiTiemConLai(LoVaccine loVaccine) {
        int select = 0;
        for (LoVaccine loVaccine1 : loVaccines) {
            if (loVaccine1.getIdLo().compareTo(loVaccine.getIdLo()) != 0) {
                select++;
            } else {
                break;
            }
        }
        loVaccine.setNewPhieuTiem();
        loVaccines.remove(select);
        loVaccines.add(select, loVaccine);
        saveData(DataController.LOVACCINE);

    }

    private void XemChiTietPT() {
        var select = tblPhieuTiem.getSelectedRow();
        if (select > -1) {
            XemVaCapNhatPTDialog xemVaCapNhatPTDialog = new XemVaCapNhatPTDialog(this, rootPaneCheckingEnabled,
                    loVaccines, phieuTiems.get(select));
            xemVaCapNhatPTDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xem!");
        }
    }

    private void CapNhatChiTietPT() {
        var select = tblPhieuTiem.getSelectedRow();
        if (select > -1) {
            CapNhatPTDialog capNhatPTDialog = new CapNhatPTDialog(this, rootPaneCheckingEnabled, loVaccines,
                     phieuTiems.get(select), select);
            capNhatPTDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xem!");
        }
    }

    public void UpdatePhieuTiemComeBack(PhieuTiem phieuTiem, int k) {
        phieuTiems.remove(k);
        phieuTiems.add(k, phieuTiem);
        saveData(DataController.PHIEUTIEM);
    }

    private void XoaPT() {
        var select = tblPhieuTiem.getSelectedRow();
        if (select > -1) {
            int confirm = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc chắn muốn xóa bản ghi này không");
            if (confirm == JOptionPane.OK_OPTION) {
                tableModelPT.removeRow(select);
                phieuTiems.remove(select);
                dataController.<PhieuTiem>writeToFile(phieuTiems, DataController.PhieuTiem_File);
                JOptionPane.showMessageDialog(rootPane, "Xóa bản ghi thành công!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
        }
    }

    private void reloadPhieuTiem() {
        phieuTiems.clear();
        phieuTiems.addAll(dataController.<PhieuTiem>readToFile(DataController.PhieuTiem_File));
    }

    private void lamMoiBangPT() {
        txtHovaTenPT.setEnabled(true);
        txtMaPT.setEnabled(true);
        txtVaccinePT.setEnabled(true);
        txtHovaTenPT.setText("");
        txtMaPT.setText("");
        txtVaccinePT.setText("");
        tableModelPT.setRowCount(0);
        reloadPhieuTiem();
        showDataPhieuTiem();
    }

    private void checkSearchPhieuTiem() {
        if (rbHovaTenPT.isSelected()) {
            txtHovaTenPT.setEnabled(true);
            txtMaPT.setEnabled(false);
            txtVaccinePT.setEnabled(false);

        }
        if (rbMaPT.isSelected()) {
            txtHovaTenPT.setEnabled(false);
            txtMaPT.setEnabled(true);
            txtVaccinePT.setEnabled(false);
        }
        if (rbTenVaccinePT.isSelected()) {
            txtHovaTenPT.setEnabled(false);
            txtMaPT.setEnabled(false);
            txtVaccinePT.setEnabled(true);
        }
    }

    private void checkAndshowPhieuTiem() {
        if (phieuTiems.size() > 0) {
            var msg = "Tìm thấy " + phieuTiems.size() + " kết quả!";
            showMessage(msg);
            showDataPhieuTiem();
        } else {
            var msg1 = "Đối tượng cần tìm không nằm trong danh sách!";
            showMessage(msg1);
            phieuTiems.clear();
            showDataPhieuTiem();
        }
    }

    private void searchPhieuTiem() {
        reloadPhieuTiem();
        if (rbHovaTenPT.isSelected()) {
            var result = txtHovaTenPT.getText();
            if (!result.isEmpty()) {
                var phieuTiems1 = dataController.SearchPhieuTiemByName(phieuTiems, result);
                phieuTiems.clear();
                phieuTiems.addAll(phieuTiems1);
                checkAndshowPhieuTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập họ và tên người tiêm cần tìm kiếm!");
            }
        } else if (rbMaPT.isSelected()) {
            var result = txtMaPT.getText();
            if (!result.isEmpty()) {
                var phieuTiems1 = dataController.SearchPhieuTiemByID(phieuTiems, result);
                phieuTiems.clear();
                phieuTiems.addAll(phieuTiems1);
                checkAndshowPhieuTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập Mã phiếu tiêm cần tìm kiếm!");
            }
        } else if (rbTenVaccinePT.isSelected()) {
            var result = txtVaccinePT.getText();
            if (!result.isEmpty()) {
                var phieuTiems1 = dataController.SearchPhieuTiemByID(phieuTiems, result);
                phieuTiems.clear();
                phieuTiems.addAll(phieuTiems1);
                checkAndshowPhieuTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập loại vaccine đã tiêm cần tìm kiếm!");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Vui lòng nhập Ngày nhập Vaccine cần tìm kiếm!");
        }
    }

    // Thao tác với phiếu đăng ký tiêm:
    private void addPhieuDkTiem() {
        AddPhieuDangKyTiem addPhieuDangKyTiem = new AddPhieuDangKyTiem(this,
                rootPaneCheckingEnabled, vaccines, phieuDangKyTiems, persons);
        addPhieuDangKyTiem.setVisible(true);
    }

    private void CreTable_PhieuDkTiem(PhieuDangKyTiem phieuDkTiem) {
        var format1 = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format1);
        Object[] row = new Object[]{
            phieuDkTiem.getMaPhieuDkTiem(), phieuDkTiem.getPerson().getFullname(),
            phieuDkTiem.getPerson().getSDT(), phieuDkTiem.getVaccie().getName(),
            simpleDateFormat.format(phieuDkTiem.getNgayDkTiem())
        };
        tableModePDKT.addRow(row);
    }

    private void showDataPhieuDkTiem() {
        tableModePDKT.setRowCount(0);
        for (PhieuDangKyTiem phieuDangKyTiem : phieuDangKyTiems) {
            CreTable_PhieuDkTiem(phieuDangKyTiem);
        }
    }

    private void suaPhieuDkTiem() {
        var select = tblPhieuDKTiem.getSelectedRow();
        if (select > -1) {
            EditPhieuDangKyTiem editPhieuDangKyTiem = new EditPhieuDangKyTiem(this,
                    rootPaneCheckingEnabled, vaccines, phieuDangKyTiems, persons,
                    phieuDangKyTiems.get(select));
            editPhieuDangKyTiem.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để chỉnh sửa!");
        }
    }

    public void EditPhieuDkTiemComeBack(PhieuDangKyTiem phieuDangKyTiem) {
        var select = tblPhieuDKTiem.getSelectedRow();
        phieuDangKyTiems.remove(select);
        phieuDangKyTiems.add(select, phieuDangKyTiem);
        tableModePDKT.removeRow(select);
        var format = "dd/MM/yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            phieuDangKyTiem.getMaPhieuDkTiem(), phieuDangKyTiem.getPerson().getFullname(),
            phieuDangKyTiem.getPerson().getSDT(), phieuDangKyTiem.getVaccie().getName(),
            simpleDateFormat.format(phieuDangKyTiem.getNgayDkTiem())
        };
        tableModePDKT.insertRow(select, row);
        saveData(DataController.PHIEUDK);

    }

    private void XoaPDKT() {
        var select = tblPhieuDKTiem.getSelectedRow();
        if (select > -1) {
            int confirm = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc chắn muốn xóa bản ghi này không");
            if (confirm == JOptionPane.OK_OPTION) {
                tableModePDKT.removeRow(select);
                phieuDangKyTiems.remove(select);
                dataController.<PhieuDangKyTiem>writeToFile(phieuDangKyTiems, DataController.PhieuDKtiem_File);
                JOptionPane.showMessageDialog(rootPane, "Xóa bản ghi thành công!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn một bản ghi để xóa!");
        }
    }

    private void reloadPhieuDkTiem() {
        phieuDangKyTiems.clear();
        phieuDangKyTiems.addAll(dataController.<PhieuDangKyTiem>readToFile(DataController.PhieuDKtiem_File));
    }

    private void lamMoiBangPDKT() {
        txtDatePdkt.setEnabled(true);
        txtIDmaPdkt.setEnabled(true);
        txtNamePdkt.setEnabled(true);
        txtNameVCpdkt.setEnabled(true);
        txtDatePdkt.setText("");
        txtIDmaPdkt.setText("");
        txtNamePdkt.setText("");
        txtNameVCpdkt.setText("");
        tableModePDKT.setRowCount(0);
        reloadPhieuDkTiem();
        showDataPhieuDkTiem();
    }

    private void checkSearchPhieuDkTiem() {
        if (rbDateDkTiem.isSelected()) {
            txtDatePdkt.setEnabled(true);
            txtIDmaPdkt.setEnabled(false);
            txtNamePdkt.setEnabled(false);
            txtNameVCpdkt.setEnabled(false);

        }
        if (rbMaPhieuDkTiem.isSelected()) {
            txtDatePdkt.setEnabled(false);
            txtIDmaPdkt.setEnabled(true);
            txtNamePdkt.setEnabled(false);
            txtNameVCpdkt.setEnabled(false);
        }
        if (rbNameDkTiem.isSelected()) {
            txtDatePdkt.setEnabled(false);
            txtIDmaPdkt.setEnabled(false);
            txtNamePdkt.setEnabled(true);
            txtNameVCpdkt.setEnabled(false);
        }
        if (rbVaccineDkTiem.isSelected()) {
            txtDatePdkt.setEnabled(false);
            txtIDmaPdkt.setEnabled(false);
            txtNamePdkt.setEnabled(false);
            txtNameVCpdkt.setEnabled(true);
        }
    }

    private void checkAndshowPhieuDkTiem() {
        if (phieuDangKyTiems.size() > 0) {
            var msg = "Tìm thấy " + phieuDangKyTiems.size() + " kết quả!";
            showMessage(msg);
            showDataPhieuDkTiem();
        } else {
            var msg1 = "Đối tượng cần tìm không nằm trong danh sách!";
            showMessage(msg1);
            phieuDangKyTiems.clear();
            showDataPhieuDkTiem();
        }
    }

    private void searchPhieuDkTiem() {
        reloadPhieuDkTiem();
        if (rbMaPhieuDkTiem.isSelected()) {
            var result = txtIDmaPdkt.getText();
            if (!result.isEmpty()) {
                var phieuDkTiems1 = dataController.SearchPhieuDkTiemById(phieuDangKyTiems, result);
                phieuDangKyTiems.clear();
                phieuDangKyTiems.addAll(phieuDkTiems1);
               checkAndshowPhieuDkTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập id phiếu đăng ký tiêm cần tìm kiếm!");
            }
        } else if (rbDateDkTiem.isSelected()) {
            var result = txtDatePdkt.getText();
            try {
                var time = chuyenDoiThoiGian(result);
                if (!result.isEmpty()) {
                    var phieuDkTiems1 = dataController.SearchPhieuDkTiemByDate(phieuDangKyTiems, time);
                    phieuDangKyTiems.clear();
                    phieuDangKyTiems.addAll(phieuDkTiems1);
                    checkAndshowPhieuDkTiem();

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "Vui lòng nhập ngày đăng ký tiêm cần tìm kiếm!");
                }
            } catch (InvalidDobException ex) {
                var msg = " .Định dạng thời gian phải ở dạng dd/MM/yyyy. Trong đó dd: ngày sinh; MM: tháng sinh";
                showMessage(ex.getMessage() + msg);
            }

        } else if (rbNameDkTiem.isSelected()) {
            var result = txtNamePdkt.getText();
            if (!result.isEmpty()) {
                var phieuDkTiems1 = dataController.SearchPhieuDkTiemByName(phieuDangKyTiems, result);
                phieuDangKyTiems.clear();
                phieuDangKyTiems.addAll(phieuDkTiems1);
                checkAndshowPhieuDkTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập tên người đăng ký tiêm cần tìm kiếm!");
            }

        } else if (rbVaccineDkTiem.isSelected()) {
            var result = txtNameVCpdkt.getText();
            if (!result.isEmpty()) {
                var phieuDkTiems1 = dataController.SearchPhieuDkTiemByNameVC(phieuDangKyTiems, result);
                phieuDangKyTiems.clear();
                phieuDangKyTiems.addAll(phieuDkTiems1);
                checkAndshowPhieuDkTiem();

            } else {
                JOptionPane.showMessageDialog(rootPane,
                        "Vui lòng nhập loại Vaccine đăng ký tiêm cần tìm kiếm!");
            }
        }
    }

    private void thongKe() {
        var result = ComboBoxTK.getSelectedIndex();
        if ( result == 0){
            kiemtraSoLuongMuiTiemConLai();
        }
        else if(result == 1 ){
            kiemTraLoVCHetHan();
        }
        else if(result == 2){
            String vanDe ="Có tất cả " + phieuTiems.size() + " phiếu tiêm đã được lập trong trạm y tế";
            txtThongKe.setText(vanDe);
        }
        else if(result == 3){
            String vanDe ="Có tất cả " + phieuDangKyTiems.size() + 
                    " phiếu đăng kí tiêm đã được lập trong trạm y tế";
            txtThongKe.setText(vanDe);
        }
        else if(result ==4){
            kiemTraLoaiVaccineCanNhap();
        }
    }

    private void kiemtraSoLuongMuiTiemConLai() {
        int i= 0;
        var result = "";
        for (Vaccine vaccine : vaccines) {
            int sum =0;
            for (LoVaccine loVC : loVaccines) {
                if(loVC.getVaccine().getId() == vaccine.getId()){
                    sum= sum + loVC.getSoLuongConLai();
    
                }
            }
            var result1="Vaccine: "  + vaccine.getName() + " còn lại " + sum +" mũi tiêm" +"\n";
            result +=result1  ;
            i++;
        }
           txtThongKe.setText(result);
    }
    long getTime(Date date){
        return date.getTime();
    }
    private void kiemTraLoVCHetHan() {
        Date now = new Date();
        long time = now.getTime();
        var result = "";
        for (LoVaccine loVaccine : loVaccines) {
            if(getTime(loVaccine.getHsdDate()) < time && loVaccine.getSoLuongConLai() > 0){
                  var result1="Lô Vaccine có mã: "  + loVaccine.getIdLo() + " đã hết hạn!" +"\n";
            result +=result1  ;
            }
                txtThongKe.setText(result);
        }
    }

    private void kiemTraLoaiVaccineCanNhap() {
        int i= 0;
        var result = "";
        for (Vaccine vaccine : vaccines) {
            int sum =0;
            for (LoVaccine loVC : loVaccines) {
                if(loVC.getVaccine().getId() == vaccine.getId()){
                    sum= sum + loVC.getSoLuongConLai();
    
                }
            }
            if(sum < 10){
            var result1="Vaccine: "  + vaccine.getName() + " cần nhập thêm về trạm" +"\n";
            result +=result1  ;
            i++;     
            }
        }if(!result.isEmpty())
        {
            txtThongKe.setText(result);
        }
        else{
            txtThongKe.setText("Trạm tiêm đã đầy đủ các loại mũi tiêm");
        }
    }

  
}
